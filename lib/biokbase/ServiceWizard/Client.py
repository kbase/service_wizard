############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class ServiceWizard(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def version(self, context=None):
        """
        Get the version of the deployed service wizard endpoint.
        :returns: instance of String
        """
        return self._client.call_method(
            'ServiceWizard.version',
            [], self._service_ver, context)

    def start(self, service, context=None):
        """
        :param service: instance of type "Service" (version - unified version
           field including semantic version, git commit hash and case of last
           version of tag (dev/beta/release).) -> structure: parameter
           "module_name" of String, parameter "version" of String
        """
        return self._client.call_method(
            'ServiceWizard.start',
            [service], self._service_ver, context)

    def stop(self, service, context=None):
        """
        :param service: instance of type "Service" (version - unified version
           field including semantic version, git commit hash and case of last
           version of tag (dev/beta/release).) -> structure: parameter
           "module_name" of String, parameter "version" of String
        """
        return self._client.call_method(
            'ServiceWizard.stop',
            [service], self._service_ver, context)

    def pause(self, service, context=None):
        """
        :param service: instance of type "Service" (version - unified version
           field including semantic version, git commit hash and case of last
           version of tag (dev/beta/release).) -> structure: parameter
           "module_name" of String, parameter "version" of String
        """
        return self._client.call_method(
            'ServiceWizard.pause',
            [service], self._service_ver, context)

    def list_service_status(self, params, context=None):
        """
        :param params: instance of type "ListServiceStatusParams" ->
           structure: parameter "is_up" of type "boolean", parameter
           "module_names" of list of String
        :returns: instance of list of type "ServiceStatus" (version is the
           semantic version of the module) -> structure: parameter
           "module_name" of String, parameter "version" of String, parameter
           "git_commit_hash" of String, parameter "release_tags" of list of
           String, parameter "hash" of String, parameter "url" of String,
           parameter "node" of String, parameter "up" of type "boolean",
           parameter "status" of String, parameter "health" of String,
           parameter "last_request_timestamp" of String
        """
        return self._client.call_method(
            'ServiceWizard.list_service_status',
            [params], self._service_ver, context)

    def get_service_status(self, service, context=None):
        """
        For a given service, check on the status.  If the service is down, attempt to restart.
        :param service: instance of type "Service" (version - unified version
           field including semantic version, git commit hash and case of last
           version of tag (dev/beta/release).) -> structure: parameter
           "module_name" of String, parameter "version" of String
        :returns: instance of type "ServiceStatus" (version is the semantic
           version of the module) -> structure: parameter "module_name" of
           String, parameter "version" of String, parameter "git_commit_hash"
           of String, parameter "release_tags" of list of String, parameter
           "hash" of String, parameter "url" of String, parameter "node" of
           String, parameter "up" of type "boolean", parameter "status" of
           String, parameter "health" of String, parameter
           "last_request_timestamp" of String
        """
        return self._client.call_method(
            'ServiceWizard.get_service_status',
            [service], self._service_ver, context)
